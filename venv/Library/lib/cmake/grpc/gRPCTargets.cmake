# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.12 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.12")
   message(FATAL_ERROR "CMake >= 2.8.12 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.12...3.29)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS gRPC::address_sorting gRPC::gpr gRPC::grpc gRPC::grpc_unsecure gRPC::grpc++ gRPC::grpc++_alts gRPC::grpc++_error_details gRPC::grpc++_reflection gRPC::grpc++_unsecure gRPC::grpc_authorization_provider gRPC::grpc_plugin_support gRPC::grpcpp_channelz)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target gRPC::address_sorting
add_library(gRPC::address_sorting SHARED IMPORTED)

set_target_properties(gRPC::address_sorting PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "protobuf::libupb;ws2_32;crypt32"
)

# Create imported target gRPC::gpr
add_library(gRPC::gpr SHARED IMPORTED)

set_target_properties(gRPC::gpr PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "GPR_DLL_IMPORTS"
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "protobuf::libupb;ws2_32;crypt32;absl::base;absl::core_headers;absl::log_severity;absl::cleanup;absl::flags;absl::flags_marshalling;absl::any_invocable;absl::check;absl::log_globals;absl::log;absl::memory;absl::bits;absl::random_random;absl::status;absl::cord;absl::str_format;absl::strings;absl::synchronization;absl::time;absl::optional"
)

# Create imported target gRPC::grpc
add_library(gRPC::grpc SHARED IMPORTED)

set_target_properties(gRPC::grpc PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "GRPC_DLL_IMPORTS"
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "OpenSSL::SSL;OpenSSL::Crypto;gRPC::gpr"
)

# Create imported target gRPC::grpc_unsecure
add_library(gRPC::grpc_unsecure SHARED IMPORTED)

set_target_properties(gRPC::grpc_unsecure PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "GRPC_DLL_IMPORTS"
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "OpenSSL::SSL;OpenSSL::Crypto;gRPC::gpr"
)

# Create imported target gRPC::grpc++
add_library(gRPC::grpc++ SHARED IMPORTED)

set_target_properties(gRPC::grpc++ PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "GRPCXX_DLL_IMPORTS"
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "protobuf::libupb;ws2_32;crypt32;absl::absl_check;absl::absl_log;gRPC::grpc;protobuf::libprotobuf"
)

# Create imported target gRPC::grpc++_alts
add_library(gRPC::grpc++_alts SHARED IMPORTED)

set_target_properties(gRPC::grpc++_alts PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "protobuf::libupb;ws2_32;crypt32;gRPC::grpc++"
)

# Create imported target gRPC::grpc++_error_details
add_library(gRPC::grpc++_error_details SHARED IMPORTED)

set_target_properties(gRPC::grpc++_error_details PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "protobuf::libupb;ws2_32;crypt32;gRPC::grpc++"
)

# Create imported target gRPC::grpc++_reflection
add_library(gRPC::grpc++_reflection STATIC IMPORTED)

set_target_properties(gRPC::grpc++_reflection PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "protobuf::libupb;ws2_32;crypt32;gRPC::grpc++"
)

# Create imported target gRPC::grpc++_unsecure
add_library(gRPC::grpc++_unsecure SHARED IMPORTED)

set_target_properties(gRPC::grpc++_unsecure PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "GRPCXX_DLL_IMPORTS"
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "protobuf::libupb;ws2_32;crypt32;absl::absl_check;absl::absl_log;gRPC::grpc_unsecure;protobuf::libprotobuf"
)

# Create imported target gRPC::grpc_authorization_provider
add_library(gRPC::grpc_authorization_provider SHARED IMPORTED)

set_target_properties(gRPC::grpc_authorization_provider PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "protobuf::libupb;ws2_32;crypt32;re2::re2;ZLIB::ZLIB;absl::config;absl::no_destructor;absl::flat_hash_map;absl::flat_hash_set;absl::inlined_vector;absl::function_ref;absl::hash;absl::type_traits;absl::statusor;absl::span;absl::utility;c-ares::cares;gRPC::gpr;gRPC::address_sorting"
)

# Create imported target gRPC::grpc_plugin_support
add_library(gRPC::grpc_plugin_support SHARED IMPORTED)

set_target_properties(gRPC::grpc_plugin_support PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "protobuf::libupb;ws2_32;crypt32;absl::status;protobuf::libprotobuf;protobuf::libprotoc"
)

# Create imported target gRPC::grpcpp_channelz
add_library(gRPC::grpcpp_channelz STATIC IMPORTED)

set_target_properties(gRPC::grpcpp_channelz PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "protobuf::libupb;ws2_32;crypt32;gRPC::grpc++"
)

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/gRPCTargets-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  if(CMAKE_VERSION VERSION_LESS "3.28"
      OR NOT DEFINED _cmake_import_check_xcframework_for_${_cmake_target}
      OR NOT IS_DIRECTORY "${_cmake_import_check_xcframework_for_${_cmake_target}}")
    foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
      if(NOT EXISTS "${_cmake_file}")
        message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
      endif()
    endforeach()
  endif()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
